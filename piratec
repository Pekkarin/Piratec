#!/bin/bash
#
# Piratebay Commandline tool
#
# Extremely simple Piratebay torrent download script. 
# Using wget among classic gnu core utils as grep, cut, sed etc.
# Script shoud be able to run in any *nix with wget.
# Usage: pirate -s <search string>
#
#-----------------------------------------------------
#
# Version history
#
# Version 0.0t3 Third testing (31 Dec 2011)
#  - Interactive option menu (testing)
#  - Removed lynx depedency
#  - Now showing torrent size and seeds
#  - Some script cleanup, still darn ugly
#
# Version 0.0t2 Second testing (29 Dec 2011)
#  - Added colors and errorhandlers
#  - Added some help information
# 
# Version 0.0t1 First testing (28 Dec 2011)
#  - Added some new small details
#
# Version 0.0 Original ugly script written (27 Dec 2011)
#  - Working script without errorhandlers
#
#-----------------------------------------------------



# BEGIN

#Colors

col0="\033[0m"      #color off
colb="\033[1;34m"   #color blue
coly="\033[1;33m"	#color yellow
colg="\033[1;32m"	#color green
colr="\033[1;31m"	#color red
fntb="\033[1m"		#font bold


#Config
function config_load {
	
	#piratesite="http://thepiratebay.org/"
	
	#Torrent save path
    #Change this to suite your needs
	torrentdir="$HOME/torrent"
	
	#Temporary files
	piratetmp="$torrentdir/.piratetmp.tmp"
	piratefound="$torrentdir/.piratefound.tmp"
	piratelinks="$torrentdir/.piratelinks.tmp"
    pirateinfo="$torrentdir/.pirateinfo.tmp"
	pirateseeds="$torrentdir/.pirateseeds.tmp"
	piratetotal="$torrentdir/.piratetotal.tmp"

	#Removes old tmp-files if last session was forced quit or crashed.
	if [ -f $piratetmp ]; then
		rm $piratetmp $piratefound $piratelinks $pirateinfo $pirateseeds $piratetotal
	fi

	#Makes new temporary files
	touch $pirateinfo $pirateseeds $piratetotal $piratetmp $piratefound $piratelinks
}

function about {
	version
	echo "Simple shell script to search and download torrent files from
The Piratebay.
"
}

function version {

echo -e \\n"The Piratebay CLI Testing version (31 Oct 2011)
Created and tested in GNU bash version 4.2.10(2)-release"\\n
}

#Script
function usage {

echo -e "
Usage: piratec -h | --help
       piratec -s | --search \"search string\".
       piratec -a |Â --about
       piratec -v | --version
       piratec -f | --full

       Example: piratec -s archlinux

Menu:  After search, hits are shown in a numbered list. You may download
       correspondin torrent by it's number, by hitting 'd'.
       
       You may jump pages by pressing 'p' and giving page number. Note that pages 
       starts from 0.

       Hit 'h' for this help, and obviously 'q' for quits.

Misc:  - Using \"piratec -s\" without string parameter shows recent additions to site.
         Consider it as bug;). Page scrolling shows nothing vice.
       - You should edit piratec-file to change settings.
       - In crash or ctrl-c quits temporary files are not deleted until next run.
"
}

#exit functions
function error_exit {
    usage
    exit 1
}

function normal_exit {
	rm $pirateseeds $piratetotal $piratetmp $piratefound $piratelinks $pirateinfo
	exit 0
}


function download {

	echo -en "${coly}Download torrent ==> ${col0}"
	read tname
	
	echo $tname | grep "[^0-9]" > /dev/null 2>&1 #grep returns either 0 or 1
		
	if [ "$?" -eq "0" ]; then
  			echo -e \\n"Sorry, only numbers allowed."\\n
  	   		normal_exit
		
		elif [ "$tname" == "" ]; then
			#echo -e \\n"Nothing done."\\n
			#normal_exit
		    echo -en "Page ${colg}$page ${coly}==> " 
			download	
		
		#if number under 31 start downloading corresponding file
		elif [ "$tname" -lt "31" ]; then
			echo -e \\n"Torrent saved to $torrentdir"\\n
			torrdown=`cat $piratelinks |sed -n "${tname}p"`
			wget -q $torrdown -P $torrentdir
			normal_exit #Normal exit-function
		
		else
			echo -e \\n"Nothing done."\\n
			normal_exit
	fi

exit 1
}


#Function to load all needed data from piratebay
function load_torrent_data {

	#downloads first page of searched item and push to file
	wget --quiet --continue http://thepiratebay.org/search/$sstring/$page -O $piratetmp
	
	#list of found torrents
	#grep "<div class=\"detName\"" $piratetmp |cut -d '>' -f3 \
	#	|cut -d '<' -f1 |cut -c1-35 > $piratefound

	grep "<div class=\"detName\"" $piratetmp | \
	awk '{gsub(/<[^>]*>|^[ \t]*/,""); gsub(/&amp;/,""); print}' |sed 's/$/                      /' \
	|cut -c1-45 > $piratefound

	grep 'http://torrents.thepiratebay.org/' $piratetmp |cut -d '=' -f2 \
		|cut -d '"' -f2 > $piratelinks

    #grep "<font class=\"detDesc\">" $piratetmp | \
    #    awk '{gsub(/<[^>]*>|^[ \t]*/,""); gsub(/&nbsp;/," "); print}' > $pirateinfo 
 	
	grep "<font class=\"detDesc\">" $piratetmp | \
 		awk '{gsub(/&nbsp;/,""); print}' |cut -d ' ' -f4-5 |cut -d ',' -f1 | \
		cut -c1-100 > $pirateinfo	

	#extract seeds
	grep "<td align=\"right\">" $piratetmp | \
	awk '{gsub(/<[^>]*>|^[ \t]*/,""); print}' |sed -n 'p;N' \
	|cut -c1-100 > $pirateseeds

	#linenumbers for found torrents
	echo -e \\n"Number  Name 					        Size            Seeds"
	echo -e "${colb}-----------------------------------------------------------------------------${col0}"
	paste $piratefound $pirateinfo $pirateseeds > $piratetotal
	nl $piratetotal

}

function load_torrent_information {
	
	echo -en "${coly}Details from torrent ==> ${col0}"
	read dname
	
	echo $dname | grep "[^0-9]" > /dev/null 2>&1 #grep returns either 0 or 1
		
	if [ "$?" -eq "0" ]; then
  			echo -e \\n"Sorry, only numbers allowed."\\n
  	   		normal_exit
		
		elif [ "$dname" == "" ]; then
			#echo -e \\n"Nothing done."\\n
			#normal_exit
		    echo -en "Page ${colg}$page ${coly}==> " 
		
			load_torrent_information
		#if number under 31 start downloading corresponding file
		elif [ "$dname" -lt "31" ]; then
			
			echo -en \\n"${colg}Details from ${col0}"
			cat $piratefound |sed -n "${dname}p"
			cat $pirateinfo |sed -n "${dname}p"
			echo
			read -p "Press any key to continue.."
			download

		else
			echo -e \\n"Nothing done."\\n
			normal_exit
	fi

exit 1


}


#Main query until answer
function query {

read -s -n 1 sel
	case $sel in
		["D","d"]*)
			download
			;;
		["P","p"]*)
			jump_page
			searchtor
			;;
		["H","h"]*)
			echo
			usage
			exit
			;;
		["I","i"]*)
			load_torrent_information
			read -p "Press any key to return.."
			download
			;;
		["Q","q"]*)
			echo -e \\n\\n"Exit.."\\n
			normal_exit
			;;
	*) 
	query
	#;;
	esac
}

#Function to change page. 0 is first.
function jump_page {
	echo -en "${coly}Jump to page ==> ${col0}"
	read page 
}	

#Main function
function searchtor {

	config_load
	load_torrent_data

	echo 
    echo -en "${colg}Showing "
	echo `cat $piratetmp |grep 'hits from' |cut -d ' ' -f4-11 |cut -d '<' -f1`
	#echo -e "${col0}$foundlist"
	echo
	echo -e "${coly}Enter 'd' to download or 'p' for jump to page or 'q' to quit"
	echo -e "${coly}Enter 'h' for help, 'i' for extra details. Note that page 0 is first page."
		echo -e "${colb}-----------------------------------------------------------------------------${col0}"
	
	echo -en "Page ${colg}${page} ${coly}==> ${col0}"

	query
}


# Commandline arguments
while [ "$1" != "" ]; do
    case $1 in
        -s |--search )     shift
							page=0
							sstring=$@ #stores parameters (search strings)
							searchtor	
                            ;;
		-h |--help )		usage #shows arguments
                            exit
                            ;;
		-a |--about )		about
							exit
							;;
        -v |--version )     version
							;;
		-f |--full )		about
							usage
							;;
		* )                 error_exit
	esac
	shift
done
